# streamlit_app.py - VERSI√ìN REFACTORIZADA Y OPTIMIZADA

import os
import time
import logging
from datetime import datetime
from typing import List, Dict, Any, Optional, Tuple
from urllib.parse import urlparse

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter

# Importar TODA la funcionalidad desde core
from core import (
    # HTTP
    fetch_html,
    fetch_many_html,
    # PDP parsing
    assemble_product,
    parse_structured_product,
    clean_text,
    # Shopping
    search_shopping,
    analyze_shopping_data,
    # Matching
    MatchResult,
    match_greedy,
    # Normalizaci√≥n
    parse_price,
    normalize_specs,
    # Insights
    build_insights_report,
    price_kpis_from_matches,
)

# Opcionales para visualizaci√≥n
try:
    from wordcloud import WordCloud
    WORDCLOUD_OK = True
except ImportError:
    WORDCLOUD_OK = False

# ------------------------------------------------------
# Configuraci√≥n y logging
# ------------------------------------------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(message)s'
)
logger = logging.getLogger(__name__)

st.set_page_config(
    page_title="An√°lisis Competitivo de Productos",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ------------------------------------------------------
# Gesti√≥n de estado y configuraci√≥n
# ------------------------------------------------------
class AppConfig:
    """Configuraci√≥n centralizada de la aplicaci√≥n"""
    
    def __init__(self):
        self.zenrows_key = self._get_zenrows_key()
        self.country = "es"
        self.force_zenrows = False
        self.js_render = True
        self.timeout = 30
        self.retries = 2
        self.min_interval = 1.0
        self.match_threshold = 70
        
    @staticmethod
    def _get_zenrows_key() -> Optional[str]:
        """Obtiene API key con prioridad: secrets > env"""
        try:
            return st.secrets.get("ZENROWS_API_KEY")
        except Exception:
            return os.getenv("ZENROWS_API_KEY")
    
    @property
    def has_zenrows(self) -> bool:
        return bool(self.zenrows_key)

@st.cache_resource
def get_config() -> AppConfig:
    """Singleton de configuraci√≥n"""
    return AppConfig()

# ------------------------------------------------------
# Servicios de negocio (usando core)
# ------------------------------------------------------
class ProductAnalysisService:
    """Servicio principal para an√°lisis de productos"""
    
    def __init__(self, config: AppConfig):
        self.config = config
        
    def extract_pdps(self, urls: List[str], progress_callback=None) -> List[Dict[str, Any]]:
        """
        Extrae informaci√≥n de m√∫ltiples PDPs en paralelo
        """
        if not urls:
            return []
        
        # Usar fetch_many_html para paralelizaci√≥n
        logger.info(f"Extrayendo {len(urls)} PDPs...")
        
        fetch_kwargs = {
            "force_zenrows": self.config.force_zenrows,
            "js_render": self.config.js_render,
            "timeout": self.config.timeout,
            "retries": self.config.retries,
            "min_interval_sec": self.config.min_interval,
        }
        
        # Extraer HTML en paralelo
        url_html_pairs = fetch_many_html(urls, concurrency=4, per_request_kwargs=fetch_kwargs)
        
        # Procesar cada HTML
        products = []
        for i, (url, html) in enumerate(url_html_pairs):
            if progress_callback:
                progress_callback(i + 1, len(urls), url)
            
            if html:
                try:
                    product = assemble_product(url, html)
                    if product and product.get("title"):
                        # A√±adir domain para mejor identificaci√≥n
                        product["domain"] = urlparse(url).netloc
                        products.append(product)
                    else:
                        logger.warning(f"No se pudo extraer producto de: {url}")
                except Exception as e:
                    logger.error(f"Error procesando {url}: {e}")
            else:
                logger.warning(f"Sin HTML para: {url}")
                
        return products
    
    def search_market(self, query: str, num_results: int = 20) -> Tuple[List[Dict], Optional[str]]:
        """
        Busca productos en el mercado (Google Shopping + Web)
        """
        logger.info(f"Buscando en mercado: {query}")
        return search_shopping(
            query=query,
            country=self.config.country,
            num_results=num_results,
            force_zenrows=self.config.force_zenrows
        )
    
    def match_products(self, pdps: List[Dict], shopping: List[Dict]) -> List[MatchResult]:
        """
        Empareja PDPs con productos del mercado
        """
        logger.info(f"Emparejando {len(pdps)} PDPs con {len(shopping)} productos del mercado")
        return match_greedy(
            pdps=pdps,
            shops=shopping,
            threshold=self.config.match_threshold,
            one_to_one=True,
            prefer_price_proximity=True
        )
    
    def generate_insights(self, pdps: List[Dict], shopping: List[Dict], 
                         matches: List[MatchResult]) -> Dict[str, Any]:
        """
        Genera informe completo de insights
        """
        logger.info("Generando insights...")
        return build_insights_report(
            pdps=pdps,
            shopping_items=shopping,
            matches=matches,
            reference_idx=0,  # Primera URL como referencia
            target_currency="EUR"
        )

# ------------------------------------------------------
# Componentes UI
# ------------------------------------------------------
class UIComponents:
    """Componentes reutilizables de UI"""
    
    @staticmethod
    def render_header():
        """Header con estilos"""
        st.markdown("""
        <style>
            .main-header {
                font-size: 2.5rem;
                font-weight: 700;
                background: linear-gradient(90deg, #FF6B6B 0%, #4ECDC4 100%);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                text-align: center;
                margin-bottom: 2rem;
            }
            .metric-card {
                background: #f8f9fa;
                border-radius: 10px;
                padding: 1rem;
                text-align: center;
            }
            .warning-box {
                background: #fff3cd;
                border-left: 4px solid #ffc107;
                padding: 1rem;
                border-radius: 5px;
                margin: 1rem 0;
            }
        </style>
        """, unsafe_allow_html=True)
        
        st.markdown('<h1 class="main-header">üéØ An√°lisis Competitivo de Productos</h1>', 
                   unsafe_allow_html=True)
        st.caption("An√°lisis avanzado PDP vs Mercado con extracci√≥n robusta e insights autom√°ticos")
    
    @staticmethod
    def render_config_sidebar(config: AppConfig):
        """Sidebar de configuraci√≥n"""
        st.sidebar.header("‚öôÔ∏è Configuraci√≥n")
        
        # Estado de Zenrows
        if config.has_zenrows:
            st.sidebar.success("‚úÖ Zenrows configurado")
        else:
            st.sidebar.warning("‚ö†Ô∏è Configura ZENROWS_API_KEY en Secrets")
        
        st.sidebar.markdown("---")
        
        # Configuraci√≥n b√°sica
        config.country = st.sidebar.selectbox(
            "üåç Pa√≠s/Idioma", 
            ["es", "en", "fr", "de", "it"], 
            index=0
        )
        
        config.match_threshold = st.sidebar.slider(
            "üéØ Umbral de matching",
            50, 95, 70, 5,
            help="Score m√≠nimo para considerar dos productos iguales"
        )
        
        # Configuraci√≥n avanzada
        with st.sidebar.expander("‚ö° Configuraci√≥n avanzada"):
            config.force_zenrows = st.checkbox(
                "Forzar Zenrows",
                value=False,
                help="Usar siempre Zenrows en lugar de intentar directo"
            )
            
            config.js_render = st.checkbox(
                "JavaScript rendering",
                value=True,
                help="Renderizar JS (m√°s lento pero m√°s completo)"
            )
            
            config.timeout = st.slider(
                "Timeout (seg)",
                10, 60, 30, 5
            )
            
            config.retries = st.slider(
                "Reintentos",
                0, 5, 2, 1
            )
            
            config.min_interval = st.slider(
                "Intervalo entre requests (seg)",
                0.5, 5.0, 1.0, 0.5
            )
        
        st.sidebar.markdown("---")
        st.sidebar.caption("v4.0 ‚Ä¢ Core Integration ‚Ä¢ Parallel Processing")
    
    @staticmethod
    def render_pdp_metrics(pdps: List[Dict]):
        """M√©tricas de PDPs extra√≠dos"""
        if not pdps:
            return
            
        df = pd.DataFrame(pdps)
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìÑ PDPs extra√≠dos", len(pdps))
        
        with col2:
            with_price = df['price'].notna().sum()
            st.metric("üí∞ Con precio", f"{with_price}/{len(pdps)}")
        
        with col3:
            avg_specs = df['specifications'].apply(lambda x: len(x) if isinstance(x, dict) else 0).mean()
            st.metric("üìä Specs promedio", f"{avg_specs:.1f}")
        
        with col4:
            brands = df['brand'].nunique()
            st.metric("üè∑Ô∏è Marcas √∫nicas", brands)
    
    @staticmethod
    def render_shopping_metrics(shopping: List[Dict], analysis: Dict):
        """M√©tricas de productos del mercado"""
        if not shopping:
            return
            
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üõí Productos encontrados", len(shopping))
        
        if analysis.get("price_stats"):
            stats = analysis["price_stats"]
            with col2:
                st.metric("üíµ Precio m√≠n", f"{stats['min']:.2f}‚Ç¨")
            with col3:
                st.metric("üí∏ Precio m√°x", f"{stats['max']:.2f}‚Ç¨")
            with col4:
                st.metric("üìä Precio medio", f"{stats['avg']:.2f}‚Ç¨")

# ------------------------------------------------------
# Tabs de la aplicaci√≥n
# ------------------------------------------------------
class PDPAnalysisTab:
    """Tab de an√°lisis de PDPs"""
    
    def __init__(self, service: ProductAnalysisService):
        self.service = service
    
    def render(self):
        st.subheader("üîó Extracci√≥n de PDPs")
        
        # Input de URLs
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("**üéØ Producto de referencia**")
            ref_url = st.text_input(
                "Tu producto (opcional)",
                placeholder="https://tu-tienda.com/producto",
                label_visibility="collapsed"
            )
        
        with col2:
            st.markdown("**üîç Productos competidores**")
            comp_urls = st.text_area(
                "URLs de competidores (una por l√≠nea)",
                placeholder="https://amazon.es/...\nhttps://pccomponentes.com/...\nhttps://mediamarkt.es/...",
                height=100,
                label_visibility="collapsed"
            )
        
        # Bot√≥n de an√°lisis
        if st.button("üöÄ Extraer informaci√≥n de productos", type="primary", use_container_width=True):
            # Preparar URLs
            urls = []
            if ref_url and ref_url.strip():
                urls.append(ref_url.strip())
            urls.extend([u.strip() for u in comp_urls.splitlines() if u.strip()])
            urls = list(dict.fromkeys(urls))  # Eliminar duplicados
            
            if not urls:
                st.error("‚ùå A√±ade al menos una URL para analizar")
                return
            
            # Extraer PDPs con progress
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            def update_progress(current, total, url):
                progress = current / total
                progress_bar.progress(progress)
                status_text.text(f"Extrayendo {current}/{total}: {urlparse(url).netloc}")
            
            with st.spinner("Extrayendo informaci√≥n de productos..."):
                pdps = self.service.extract_pdps(urls, progress_callback=update_progress)
            
            progress_bar.empty()
            status_text.empty()
            
            if pdps:
                st.success(f"‚úÖ {len(pdps)} productos extra√≠dos correctamente")
                st.session_state["pdp_data"] = pdps
                
                # Mostrar resultados
                UIComponents.render_pdp_metrics(pdps)
                
                # Tabla de resultados
                df = pd.DataFrame(pdps)[['title', 'price', 'brand', 'domain', 'url']]
                st.dataframe(df, use_container_width=True, hide_index=True)
                
                # Detalles expandibles
                with st.expander("üìã Ver especificaciones extra√≠das"):
                    for i, pdp in enumerate(pdps):
                        st.markdown(f"**{i+1}. {pdp.get('title', 'Sin t√≠tulo')}**")
                        if pdp.get('specifications'):
                            specs_df = pd.DataFrame(
                                list(pdp['specifications'].items()),
                                columns=['Caracter√≠stica', 'Valor']
                            )
                            st.dataframe(specs_df, use_container_width=True, hide_index=True)
                        else:
                            st.info("Sin especificaciones detectadas")
            else:
                st.error("‚ùå No se pudo extraer informaci√≥n de ninguna URL")

class MarketAnalysisTab:
    """Tab de an√°lisis de mercado"""
    
    def __init__(self, service: ProductAnalysisService):
        self.service = service
    
    def render(self):
        st.subheader("üõí An√°lisis de Mercado (Google Shopping)")
        
        # B√∫squeda
        col1, col2 = st.columns([3, 1])
        
        with col1:
            query = st.text_input(
                "¬øQu√© producto quieres buscar?",
                placeholder="Ej: iPhone 15 Pro Max 256GB",
                label_visibility="visible"
            )
        
        with col2:
            num_results = st.number_input(
                "Resultados",
                min_value=10,
                max_value=100,
                value=30,
                step=10
            )
        
        if st.button("üîé Buscar en el mercado", type="primary", use_container_width=True):
            if not query:
                st.error("‚ùå Introduce un t√©rmino de b√∫squeda")
                return
            
            with st.spinner(f"Buscando '{query}' en el mercado..."):
                products, error = self.service.search_market(query, num_results)
            
            if error:
                st.warning(f"‚ö†Ô∏è {error}")
            
            if products:
                st.success(f"‚úÖ {len(products)} productos encontrados")
                st.session_state["shopping_products"] = products
                
                # An√°lisis del mercado
                analysis = analyze_shopping_data(products)
                st.session_state["market_analysis"] = analysis
                
                # M√©tricas
                UIComponents.render_shopping_metrics(products, analysis)
                
                # Visualizaciones
                col1, col2 = st.columns(2)
                
                with col1:
                    # Distribuci√≥n por tienda
                    if analysis.get("sources"):
                        sources_df = pd.DataFrame(
                            list(analysis["sources"].items()),
                            columns=["Tienda", "Productos"]
                        ).sort_values("Productos", ascending=False).head(10)
                        
                        fig = px.bar(
                            sources_df,
                            x="Productos",
                            y="Tienda",
                            orientation="h",
                            title="Top 10 Tiendas",
                            color="Productos",
                            color_continuous_scale="Viridis"
                        )
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    # Distribuci√≥n de precios
                    if analysis.get("price_stats"):
                        prices = []
                        for p in products:
                            amt, _ = parse_price(p.get("price", ""))
                            if amt and 0.01 < amt < 100000:
                                prices.append(amt)
                        
                        if prices:
                            fig = px.histogram(
                                x=prices,
                                nbins=20,
                                title="Distribuci√≥n de Precios",
                                labels={"x": "Precio (‚Ç¨)", "y": "Frecuencia"}
                            )
                            fig.update_layout(height=400)
                            st.plotly_chart(fig, use_container_width=True)
                
                # Tabla de productos
                with st.expander("üìä Ver todos los productos encontrados"):
                    products_df = pd.DataFrame(products)
                    st.dataframe(products_df, use_container_width=True, hide_index=True)

class InsightsTab:
    """Tab de insights y matching"""
    
    def __init__(self, service: ProductAnalysisService):
        self.service = service
    
    def render(self):
        st.subheader("üîó Matching & Insights Competitivos")
        
        pdps = st.session_state.get("pdp_data", [])
        shopping = st.session_state.get("shopping_products", [])
        
        if not pdps:
            st.info("üí° Primero extrae PDPs en la pesta√±a 'Extracci√≥n de PDPs'")
            return
        
        if not shopping:
            st.info("üí° Primero busca productos en la pesta√±a 'An√°lisis de Mercado'")
            return
        
        # Realizar matching
        if st.button("üéØ Ejecutar an√°lisis competitivo", type="primary", use_container_width=True):
            with st.spinner("Emparejando productos y generando insights..."):
                # Matching
                matches = self.service.match_products(pdps, shopping)
                st.session_state["matches"] = matches
                
                # Insights
                insights = self.service.generate_insights(pdps, shopping, matches)
                st.session_state["insights"] = insights
            
            st.success("‚úÖ An√°lisis completado")
        
        # Mostrar resultados si existen
        if "insights" in st.session_state:
            insights = st.session_state["insights"]
            
            # KPIs principales
            st.markdown("### üìä KPIs Principales")
            
            price_data = insights.get("price", {})
            if price_data and "price_index_stats" in price_data and price_data["price_index_stats"]:
                stats = price_data["price_index_stats"]
                
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric(
                        "üìà Price Index Promedio",
                        f"{stats['avg']:.2f}",
                        help="1.0 = mismo precio, >1.0 = m√°s caro, <1.0 = m√°s barato"
                    )
                with col2:
                    st.metric("üéØ Match Rate", f"{price_data.get('match_rate', 0):.1%}")
                with col3:
                    outliers = price_data.get("outliers", {})
                    st.metric("‚ö†Ô∏è Outliers", f"{outliers.get('above', 0) + outliers.get('below', 0)}")
                with col4:
                    st.metric("üí∞ Rango PI", f"{stats['min']:.2f} - {stats['max']:.2f}")
            
            # Tabla de matching detallada
            st.markdown("### üîó Detalle de Matching")
            
            if "rows" in price_data:
                match_df = price_data["rows"]
                if isinstance(match_df, pd.DataFrame):
                    # Formatear columnas
                    display_df = match_df[[
                        'pdp_title', 'pdp_price_amount', 
                        'shop_title', 'shop_price_amount',
                        'match_score', 'price_index'
                    ]].copy()
                    
                    display_df.columns = [
                        'Producto PDP', 'Precio PDP',
                        'Producto Mercado', 'Precio Mercado',
                        'Score Match', 'Price Index'
                    ]
                    
                    # Aplicar estilos condicionales
                    def highlight_price_index(val):
                        if pd.isna(val):
                            return ''
                        if val > 1.1:
                            return 'background-color: #ffcccc'  # Rojo claro
                        elif val < 0.9:
                            return 'background-color: #ccffcc'  # Verde claro
                        return ''
                    
                    styled_df = display_df.style.applymap(
                        highlight_price_index,
                        subset=['Price Index']
                    ).format({
                        'Precio PDP': '‚Ç¨{:.2f}',
                        'Precio Mercado': '‚Ç¨{:.2f}',
                        'Score Match': '{:.0f}',
                        'Price Index': '{:.2f}'
                    }, na_rep='-')
                    
                    st.dataframe(styled_df, use_container_width=True, hide_index=True)
            
            # Visualizaciones
            st.markdown("### üìà Visualizaciones")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Scatter plot Price Index vs Match Score
                if "rows" in price_data and isinstance(price_data["rows"], pd.DataFrame):
                    df = price_data["rows"].dropna(subset=['price_index', 'match_score'])
                    if not df.empty:
                        fig = px.scatter(
                            df,
                            x='match_score',
                            y='price_index',
                            hover_data=['pdp_title', 'shop_title'],
                            title='Price Index vs Match Score',
                            labels={'match_score': 'Match Score', 'price_index': 'Price Index'},
                            color='price_index',
                            color_continuous_scale='RdYlGn_r'
                        )
                        fig.add_hline(y=1.0, line_dash="dash", line_color="gray")
                        fig.update_layout(height=400)
                        st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Cobertura de especificaciones
                specs_data = insights.get("specs", {})
                if specs_data and "coverage_weighted" in specs_data:
                    coverage = specs_data["coverage_weighted"] * 100
                    
                    fig = go.Figure(go.Indicator(
                        mode="gauge+number+delta",
                        value=coverage,
                        title={'text': "Cobertura de Especificaciones"},
                        domain={'x': [0, 1], 'y': [0, 1]},
                        gauge={
                            'axis': {'range': [None, 100]},
                            'bar': {'color': "darkblue"},
                            'steps': [
                                {'range': [0, 50], 'color': "lightgray"},
                                {'range': [50, 80], 'color': "gray"}
                            ],
                            'threshold': {
                                'line': {'color': "red", 'width': 4},
                                'thickness': 0.75,
                                'value': 90
                            }
                        }
                    ))
                    fig.update_layout(height=400)
                    st.plotly_chart(fig, use_container_width=True)
            
            # Gaps detectados
            st.markdown("### üéØ Oportunidades Detectadas")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Especificaciones faltantes
                if specs_data and "missing_keys" in specs_data:
                    missing = specs_data["missing_keys"][:5]
                    if missing:
                        st.markdown("**üìã Especificaciones faltantes (top 5):**")
                        for item in missing:
                            st.markdown(f"- {item['key']} (peso: {item['weight']:.1f})")
            
            with col2:
                # Variantes faltantes
                variants_data = insights.get("variants", {})
                if variants_data and "missing_variants" in variants_data:
                    missing_vars = variants_data["missing_variants"]
                    if missing_vars:
                        st.markdown("**üé® Variantes no cubiertas:**")
                        for var in missing_vars[:5]:
                            st.markdown(f"- {var}")

class ExportTab:
    """Tab de exportaci√≥n de datos"""
    
    def render(self):
        st.subheader("üì§ Exportar Resultados")
        
        # Verificar datos disponibles
        has_pdp = "pdp_data" in st.session_state
        has_shopping = "shopping_products" in st.session_state
        has_insights = "insights" in st.session_state
        
        if not any([has_pdp, has_shopping, has_insights]):
            st.info("üí° No hay datos para exportar. Realiza primero un an√°lisis.")
            return
        
        st.markdown("### üìä Datos disponibles para exportar")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if has_pdp:
                st.markdown("**üîó PDPs Extra√≠dos**")
                pdp_df = pd.DataFrame(st.session_state["pdp_data"])
                st.markdown(f"- {len(pdp_df)} productos")
                st.markdown(f"- {len(pdp_df.columns)} campos")
                
                csv = pdp_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "‚¨áÔ∏è Descargar PDPs (CSV)",
                    csv,
                    f"pdps_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    "text/csv",
                    use_container_width=True
                )
        
        with col2:
            if has_shopping:
                st.markdown("**üõí Productos del Mercado**")
                shop_df = pd.DataFrame(st.session_state["shopping_products"])
                st.markdown(f"- {len(shop_df)} productos")
                st.markdown(f"- {len(shop_df.columns)} campos")
                
                csv = shop_df.to_csv(index=False).encode('utf-8')
                st.download_button(
                    "‚¨áÔ∏è Descargar Mercado (CSV)",
                    csv,
                    f"mercado_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    "text/csv",
                    use_container_width=True
                )
        
        with col3:
            if has_insights:
                st.markdown("**üìà Insights Completos**")
                insights = st.session_state["insights"]
                
                # Convertir insights a formato exportable
                export_data = {
                    'timestamp': datetime.now().isoformat(),
                    'config': {
                        'match_threshold': get_config().match_threshold,
                        'country': get_config().country
                    }
                }
                
                # Extraer datos principales
                if "price" in insights and "rows" in insights["price"]:
                    if isinstance(insights["price"]["rows"], pd.DataFrame):
                        export_data['matching'] = insights["price"]["rows"].to_dict('records')
                
                # KPIs
                if "price" in insights:
                    export_data['kpis'] = {
                        'match_rate': insights["price"].get("match_rate"),
                        'price_index_stats': insights["price"].get("price_index_stats"),
                        'outliers': insights["price"].get("outliers")
                    }
                
                # Exportar como JSON
                import json
                json_str = json.dumps(export_data, indent=2, default=str)
                st.download_button(
                    "‚¨áÔ∏è Descargar Insights (JSON)",
                    json_str,
                    f"insights_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    "application/json",
                    use_container_width=True
                )
        
        # Exportaci√≥n combinada
        if has_pdp and has_shopping and has_insights:
            st.markdown("### üì¶ Exportaci√≥n Completa")
            
            if st.button("üìÑ Generar Reporte Completo (Excel)", use_container_width=True):
                try:
                    # Crear Excel con m√∫ltiples hojas
                    from io import BytesIO
                    output = BytesIO()
                    
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        # PDPs
                        if has_pdp:
                            pd.DataFrame(st.session_state["pdp_data"]).to_excel(
                                writer, sheet_name='PDPs', index=False
                            )
# Mercado
                        if has_shopping:
                            pd.DataFrame(st.session_state["shopping_products"]).to_excel(
                                writer, sheet_name='Mercado', index=False
                            )
                        
                        # Matching
                        if "insights" in st.session_state:
                            insights = st.session_state["insights"]
                            if "price" in insights and "rows" in insights["price"]:
                                if isinstance(insights["price"]["rows"], pd.DataFrame):
                                    insights["price"]["rows"].to_excel(
                                        writer, sheet_name='Matching', index=False
                                    )
                        
                        # KPIs
                        kpis_data = []
                        if "insights" in st.session_state:
                            insights = st.session_state["insights"]
                            
                            # Price KPIs
                            if "price" in insights:
                                kpis_data.append({
                                    'M√©trica': 'Match Rate',
                                    'Valor': f"{insights['price'].get('match_rate', 0):.1%}"
                                })
                                
                                if "price_index_stats" in insights["price"] and insights["price"]["price_index_stats"]:
                                    stats = insights["price"]["price_index_stats"]
                                    kpis_data.extend([
                                        {'M√©trica': 'Price Index Promedio', 'Valor': f"{stats['avg']:.2f}"},
                                        {'M√©trica': 'Price Index M√≠nimo', 'Valor': f"{stats['min']:.2f}"},
                                        {'M√©trica': 'Price Index M√°ximo', 'Valor': f"{stats['max']:.2f}"},
                                        {'M√©trica': 'Price Index Mediana', 'Valor': f"{stats['median']:.2f}"},
                                    ])
                            
                            # Specs KPIs
                            if "specs" in insights and "coverage_weighted" in insights["specs"]:
                                kpis_data.append({
                                    'M√©trica': 'Cobertura de Especificaciones',
                                    'Valor': f"{insights['specs']['coverage_weighted'] * 100:.1f}%"
                                })
                        
                        if kpis_data:
                            pd.DataFrame(kpis_data).to_excel(
                                writer, sheet_name='KPIs', index=False
                            )
                    
                    # Preparar descarga
                    output.seek(0)
                    st.download_button(
                        label="‚¨áÔ∏è Descargar Reporte Excel",
                        data=output,
                        file_name=f"reporte_completo_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )
                    st.success("‚úÖ Reporte generado correctamente")
                    
                except Exception as e:
                    st.error(f"‚ùå Error generando el reporte: {str(e)}")
                    logger.error(f"Error en exportaci√≥n Excel: {e}")

# ------------------------------------------------------
# Aplicaci√≥n principal
# ------------------------------------------------------
def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    
    # Configuraci√≥n
    config = get_config()
    
    # Header
    UIComponents.render_header()
    
    # Sidebar
    UIComponents.render_config_sidebar(config)
    
    # Servicio principal
    service = ProductAnalysisService(config)
    
    # Informaci√≥n inicial
    if not config.has_zenrows:
        st.warning("""
        ‚ö†Ô∏è **Zenrows API Key no configurada**
        
        Para obtener mejores resultados y evitar bloqueos:
        1. Obt√©n una API key gratuita en [zenrows.com](https://zenrows.com)
        2. A√±√°dela en Streamlit Cloud: Settings ‚Üí Secrets ‚Üí `ZENROWS_API_KEY = "tu_key"`
        
        La aplicaci√≥n funcionar√° con capacidades limitadas sin la API key.
        """)
    
    # Tabs principales
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üîó Extracci√≥n de PDPs",
        "üõí An√°lisis de Mercado", 
        "üéØ Matching & Insights",
        "üì§ Exportar Datos",
        "üìö Ayuda"
    ])
    
    with tab1:
        pdp_tab = PDPAnalysisTab(service)
        pdp_tab.render()
    
    with tab2:
        market_tab = MarketAnalysisTab(service)
        market_tab.render()
    
    with tab3:
        insights_tab = InsightsTab(service)
        insights_tab.render()
    
    with tab4:
        export_tab = ExportTab()
        export_tab.render()
    
    with tab5:
        render_help_tab()
    
    # Footer
    st.markdown("---")
    st.caption("""
    **PDP Analyzer v4.0** | Powered by Core Integration | 
    [GitHub](https://github.com/tu-usuario/tu-repo) | 
    [Reportar problemas](https://github.com/tu-usuario/tu-repo/issues)
    """)

def render_help_tab():
    """Tab de ayuda y documentaci√≥n"""
    st.subheader("üìö Gu√≠a de Uso")
    
    with st.expander("üéØ ¬øQu√© es esta herramienta?"):
        st.markdown("""
        **PDP Analyzer** es una herramienta profesional de an√°lisis competitivo que permite:
        
        - **Extraer informaci√≥n** de p√°ginas de producto (PDPs) de cualquier e-commerce
        - **Analizar el mercado** mediante Google Shopping
        - **Comparar productos** autom√°ticamente usando algoritmos de matching
        - **Generar insights** sobre posicionamiento de precio y gaps de contenido
        - **Exportar resultados** en m√∫ltiples formatos
        
        La herramienta utiliza t√©cnicas avanzadas de web scraping y an√°lisis de datos estructurados.
        """)
    
    with st.expander("üöÄ Inicio R√°pido"):
        st.markdown("""
        ### Flujo b√°sico de trabajo:
        
        1. **Extracci√≥n de PDPs** 
           - A√±ade la URL de tu producto (opcional)
           - A√±ade URLs de competidores
           - Haz clic en "Extraer informaci√≥n"
        
        2. **An√°lisis de Mercado**
           - Busca tu producto en Google Shopping
           - Ajusta el n√∫mero de resultados seg√∫n necesites
           - Analiza la distribuci√≥n de precios y tiendas
        
        3. **Matching & Insights**
           - La herramienta empareja autom√°ticamente PDPs con productos del mercado
           - Calcula el Price Index (tu precio vs mercado)
           - Identifica gaps en especificaciones y variantes
        
        4. **Exportar**
           - Descarga los datos en CSV, JSON o Excel
           - Genera reportes completos con todas las m√©tricas
        """)
    
    with st.expander("‚öôÔ∏è Configuraci√≥n Avanzada"):
        st.markdown("""
        ### Par√°metros configurables:
        
        - **Pa√≠s/Idioma**: Afecta a las b√∫squedas en Google Shopping
        - **Umbral de Matching**: Score m√≠nimo para considerar dos productos iguales (70-95)
        - **Forzar Zenrows**: Usar siempre proxy premium (m√°s lento pero m√°s fiable)
        - **JavaScript Rendering**: Necesario para sitios con contenido din√°mico
        - **Timeout**: Tiempo m√°ximo de espera por petici√≥n
        - **Reintentos**: N√∫mero de intentos si falla una petici√≥n
        - **Intervalo**: Tiempo entre peticiones para evitar rate limiting
        """)
    
    with st.expander("üìä Interpretaci√≥n de M√©tricas"):
        st.markdown("""
        ### KPIs principales:
        
        **Price Index**
        - `1.0` = Tu precio es igual al mercado
        - `> 1.0` = Tu precio es superior al mercado
        - `< 1.0` = Tu precio es inferior al mercado
        - Ejemplo: `1.15` = Tu precio es 15% m√°s caro
        
        **Match Score**
        - `0-100` = Similitud entre productos
        - `> 90` = Match muy probable
        - `70-90` = Match probable
        - `< 70` = Match poco probable
        
        **Coverage de Especificaciones**
        - % de caracter√≠sticas clave que tu producto tiene vs competencia
        - Identifica qu√© informaci√≥n falta en tu PDP
        
        **Outliers**
        - Productos con precios anormalmente altos o bajos
        - √ötil para identificar errores o estrategias agresivas
        """)
    
    with st.expander("üêõ Soluci√≥n de Problemas"):
        st.markdown("""
        ### Problemas comunes:
        
        **"No se pudo extraer contenido"**
        - El sitio puede estar bloqueando requests
        - Soluci√≥n: Configura Zenrows API key
        
        **"Sin resultados en Google Shopping"**
        - La b√∫squeda es demasiado espec√≠fica
        - Soluci√≥n: Usa t√©rminos m√°s gen√©ricos
        
        **"Match Score bajo"**
        - Los t√≠tulos de productos son muy diferentes
        - Soluci√≥n: Ajusta el umbral de matching
        
        **"Error al generar reporte"**
        - Puede faltar la librer√≠a xlsxwriter
        - Soluci√≥n: Aseg√∫rate de tener pandas con soporte Excel
        """)
    
    with st.expander("üîí Privacidad y L√≠mites"):
        st.markdown("""
        ### Informaci√≥n importante:
        
        - **Privacidad**: No almacenamos datos entre sesiones
        - **Rate Limiting**: Respetamos los l√≠mites de los sitios web
        - **Uso Responsable**: Esta herramienta es para an√°lisis competitivo leg√≠timo
        - **Zenrows**: Los l√≠mites dependen de tu plan (free = 1000 requests/mes)
        
        ### Limitaciones t√©cnicas:
        
        - M√°ximo 100 URLs por an√°lisis
        - Timeout de 60 segundos por petici√≥n
        - Algunos sitios pueden requerir configuraci√≥n especial
        """)
    
    # Mostrar estado del sistema
    st.markdown("### üîß Estado del Sistema")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üì¶ Versi√≥n", "4.0.0")
        
    with col2:
        config = get_config()
        status = "‚úÖ Configurado" if config.has_zenrows else "‚ö†Ô∏è No configurado"
        st.metric("üîë Zenrows", status)
    
    with col3:
        # Verificar m√≥dulos opcionales
        modules = []
        try:
            import extruct
            modules.append("‚úÖ extruct")
        except:
            modules.append("‚ùå extruct")
        
        try:
            from rapidfuzz import fuzz
            modules.append("‚úÖ rapidfuzz")
        except:
            modules.append("‚ùå rapidfuzz")
        
        try:
            from price_parser import Price
            modules.append("‚úÖ price-parser")
        except:
            modules.append("‚ùå price-parser")
        
        st.metric("üìö M√≥dulos", " | ".join(modules))

# ------------------------------------------------------
# Punto de entrada
# ------------------------------------------------------
if __name__ == "__main__":
    # Configurar logging
    if os.getenv("DEBUG"):
        logging.getLogger().setLevel(logging.DEBUG)
    
    # Ejecutar aplicaci√≥n
    try:
        main()
    except Exception as e:
        logger.error(f"Error cr√≠tico en la aplicaci√≥n: {e}", exc_info=True)
        st.error(f"""
        ‚ùå **Error cr√≠tico en la aplicaci√≥n**
        
        {str(e)}
        
        Por favor, reporta este error en [GitHub Issues](https://github.com/tu-usuario/tu-repo/issues)
        """)
